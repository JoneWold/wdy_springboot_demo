/*******************************************************************************
* @author wdy
*******************************************************************************/
SpringBoot基础笔记

一、相关注解

    1、 @Component
        将此Javabean放入spring容器

    2、 @ConfigurationProperties
        绑定yaml配置的值，支持批量注入值，支持松散语法(如：nickName写成nick-name)，不支持SpEL，jsr303数据校验
        支持注入复杂类型，简单类型（8个基本类型/String/Date）

    3、 @Value
        支持单个值注入，不支持松散语法，支持SpEL（"${student.name}"），不支持jsr303数据校验，不支持注入复杂类型

    4、 @Validated
        开启jsr303数据校验的注解，然后@Email等注解才会生效

    5、 @PropertySource
        默认会加载application.properties/application.yml配置文件中的数据。
        @PropertySource(value={"classpath:conf.properties"}) 会加载conf.properties文件中的数据，
        但是其中value的值只能加载.properties为后缀的配置数据，不支持.yml

    6、@ImportResource
        spring boot 自动装配/自动配置：spring等配置文件默认会被springboot自动给配置好。
        如果要自己编写spring等配置文件，springboot 默认是不识别的。
        如果需要识别，则需要在springboot主配置类上通过@ImportResource(locations = {"classpath:wdySpring.xml"})指定配置文件的路径。
        但是不推荐手写spring配置文件
        配置：xml配置文件，通过注解配置
        springboot推荐注解方式进行配置：@Configuration，@Bean


二、动态切换多环境

	（1）编译器运行参数指定环境：步骤Run/Debug Configurations --->>> program arguments处添加代码：--spring.profiles.active=dev
	（2）编译器vm参数指定环境：VM arguments处添加代码：-Dspring.profiles.active=dev
	（3）cmd命令行方式指定（需要将项目打包成jar包）：
	java -jar wdy_springboot_demo-0.0.1-SNAPSHOT.jar --spring.profiles.active=test


三、配置文件的位置

    1、项目内部的配置文件：
    	.properties和.yml中的配置，相互补充；如果冲突，则.properties优先级高
    	springboot 默认能够读取的application.properties/application.yml这两个文件，可以存在于以下4个文件目录下
    	file：项目根目录/config  优先级最高
    	file：项目根目录
    	classpath：项目根目录/config
    	classpath：项目根目录    优先级最低

    2、项目外部的配置文件：
    	（1）编译器运行参数指定配置文件：步骤在Run/Debug Configurations --->>> program arguments处添加代码：--spring.config.location=D:/application.properties
    	（2）cmd命令行调用外部配置文件：
      java -jar wdy_springboot_demo-0.0.1-SNAPSHOT.jar --spring.config.location=D:/application.properties
    	注意：如果同一个配置同时存在于内部配置文件和外部配置文件，则外部>内部

    3、项目运行参数修改某几个配置：
    	编译器运行参数，在Run/Debug Configurations --->>> program arguments处添加代码：--server.port=6663
    	通过cmd命令行修改某一配置: java -jar 项目名.jar --server.port=6663

    	注意：多个地方配置时，如果冲突，优先级是：命令行参数（运行参数>外部配置文件）>内部文件（properties>yml）


四、springboot日志处理

    1、日志框架：UCL  JUL  jboss-logging  logback  log4j  log4j2  slf4j...
    	springboot默认选用的是logback，slf4j
    	日志级别：
    		TRACE< DEBUG< INFO< WARN< ERROR< FATAL< OFF
    	springboot默认的日志级别是info（即只打印info及之后级别的信息），
    	（1）也可以自定义一个日志级别：logging.level.com.wdy.springboot.SptApplication=warn
    	（2）可以通过配置将日志信息存放在文件中：logging.file=springboot.log
    	（3）也可以存储在某文件夹中：logging.path=D:/log/，并且文件名默认为spring.log
    	（4）指定日志显示格式：
    	日志在控制台中：
    	logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n
    	%d：日期时间
    	%thread：线程名
    	%-5level：显示日志级别，-5表示从左显示5个字符宽度
    	%logger{50}：设置日志长度
    	%msg：日志消息
    	%n：回车
    	日志在文件中：
    	logging.pattern.file=%d{yyyy-MM-dd} ** [%thread] ** %-5level %logger{50} - %msg%n

    2、springboot默认日志格式，是在jar包中相应的xml文件中进行配置。


五、springboot处理web项目静态资源（html,css,js）

	springboot是一个jar，因此静态资源就不是再存放到webapps中，静态资源的存放路径通过WebMvcAutoConfiguration类的addResourceHandlers()方法指定：/webjars/
	1、引入第三方静态资源：官网地址 https://www.webjars.org/
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.5.1</version>
		</dependency>
	注：以前引入js等静态资源，是将这些资源 下载并手工放入到webapp目录中；而springboot将这些静态资源直接以jar文件(maven)的形式引入项目。
	访问该静态资源：http://127.0.0.1:666/webjars/jquery/3.5.1/jquery.js
	
	2、自己写的静态资源如何放入springboot中？
		springboot约定：将一些目录结构 设置成静态资源存放目录，我们的静态资源直接放入这些目录即可。
		该目录通过WebMvcAutoConfiguration类的addResourceHandlers()方法中的this.resourceProperties.getStaticLocations()指定到类ResourceProperties中常量：CLASSPATH_RESOURCE_LOCATIONS。
		包含："classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"

	注意：在以上目录存放资源文件后，访问时直接访问：http://127.0.0.1:666/hello.html


    3、设置欢迎页
        （1）通过类WebMvcAutoConfiguration中welcomePageHandlerMapping()方法 -->> getWelcomePage() -->> getIndexHtml()方法 指定默认的欢迎页：location + "index.html"。
    即任意一个静态资源目录中的index.html就是欢迎页。
        （2）网站中，网页标签的logo是固定名字：favicon.ico，现版本源码中没有找到，但是确实能改logo，需要自定义该图片放入任意静态资源目录中即可。


	4、如何自定义静态资源目录
	    类ResourceProperties文件中的注解prefix = "spring.resources"，加上该类中的常量staticLocations即可。
        如：spring.resources.static-locations=classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/
	    注意：自定义静态资源目录后，以前默认的静态资源目录会失效。

    5、springboot通过XxxAutoConfiguration实现自动装配，通过XxxProperties文件中的 prefix+属性名 修改默认值。


六、动态资源
    JSP （springboot 默认不支持）推荐：模板引擎 thymeleaf
    引入thymeleaf：官网查询thymeleaf的maven依赖
    通过ThymeleafAutoConfiguration --> ThymeleafProperties类找到thymeleaf默认属性配置。

	1、基本用法：<p th:text="${welcome}">Welcome to thymeleaf......</p>中，发现如果存在相关表达式，会先从${welcome}取值，如果有 则直接显示，如果没有 再显示Welcome to thymeleaf......
        作用：th 就是替换原有html的值，即 th:html属性名=值；（th:xx 参见第十章：Attribute Precedence）

        区别：th:utext  获取文本值，会受到HTML样式的渲染
              th:text  获取文本值（不转义），当普通文本显示，不会受到HTML样式的渲染

    2、取值符号：参见第四章：Standard Expression Syntax
    3、遍历：参见第六章：Iteration
        th:each="prod : ${prods}"


七、SpringBoot 整合JSP开发
    之前springboot默认自带一个内置的tomcat，不需要打war包，直接通过jar即可运行。如果要整合jsp开发，就要单独配置一个外置的tomcat，需要打war包。
    注意：<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
                <scope>provided</scope>
          </dependency>
        provided：意思是 将项目打包时，不需要将内置的tomcat一起打包。

    1、新建boot项目，<packaging>war</packaging>

    2、建立基本的web项目所需的目录结构
        webapp/WEB-INF
        webapp/WEB-INF/web.xml （不需要）
        webapp/jspIndex.jsp

    3、创建tomcat实例，部署项目
        STS：Servers -> new Server（先选择要配置的tomcat版本，再将maven打的war包add到tomcat里面）-> start
        访问：localhost:8080/项目名/jspIndex.jsp
             localhost:8080/项目名/接口名

    如果是一个war包的springboot项目，在启动服务器tomcat时，会自动调用ServletInitializer类中的configure方法，configure方法会调用springboot的主配置类，从而启动springboot。

    public class ServletInitializer extends SpringBootServletInitializer {
        @Override
        protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
            return application.sources(SptApplication.class);
        }
    }


八、运行Java打包程序
    java -jar -Xms512m -Xmx2048m -Dloader.path=config  zenith-front-all-run-1.0-SNAPSHOT.jar


